#include <iostream>
#include <stack>

using namespace std;
typedef struct n
{
    struct n *ls;
    int info;
    struct n *rs;
}Node;
class BST
{
    Node *root;
    public:
    BST();
    Node *getNode(int info);
    void insert(int info);
    void create(int n);
    void inOrder(Node *currentRoot);
    void preOrder(Node *currentRoot);
    void postOrder(Node *currentRoot);
    void nonInOrder(Node *currentRoot);
    void nonPreOrder(Node *currentRoot);
    void nonPostOrder(Node *currentRoot);
    int countNodes(Node *currentRoot);
    int countLeafNodes(Node *currentRoot);
    int heightOfTree(Node *currentRoot);
    void mirrorTree(Node *currentRoot);
    void searchNode(Node *currentRoot, Node **keyNode, Node **parent, int key);
    void deleteNode(Node *currentRoot, int key);
    void demo();
    int menu();
};
void BST::deleteNode(Node *currentRoot, int key)
{
    Node *keyNode, *parent;
    Node *ls1, *rs1;
    keyNode= parent= NULL;
    searchNode(currentRoot,&keyNode,&parent,key);
    if(keyNode != NULL)
    {
        ls1= keyNode->ls;
        rs1= keyNode->rs;
        if(parent != NULL)
        {
            if(ls1== NULL && rs1== NULL)
            {
                if(parent->rs == keyNode)
                {
                    parent->rs= NULL;
                    delete keyNode;
                }
                else
                {
                parent->ls= NULL;
                delete keyNode;
                }
            }
            if(ls1==NULL && rs1 != NULL)
            {
                if(parent->rs== keyNode)
                {
                parent->rs= rs1;
                delete keyNode;
                }
                else
                {
                parent->ls= rs1;
                delete keyNode;
                }
            }

            if(ls1!= NULL && rs1== NULL)
            {
                if(parent->rs== keyNode)
                {
                    parent->rs = ls1;
                    delete keyNode;
                }
                else
                {
                    parent->ls = ls1;
                    delete keyNode;
                }
            }
            if(ls1!= NULL && rs1 != NULL)
            {
                parent = keyNode;
                while(ls1->rs != NULL)
                {
                parent = ls1;
                ls1 = ls1->rs;
                }
                keyNode->info= ls1->info;
                deleteNode(parent,key);
            }
        }
        else
        {
            if(ls1== NULL && rs1== NULL)
            {
                delete keyNode;
                currentRoot = NULL;
            }
            if(ls1== NULL && rs1 != NULL)
            {
                currentRoot = rs1;
                delete keyNode;
            }
            if(ls1!= NULL &&rs1 == NULL)
            {
                currentRoot= ls1;
                delete keyNode;
            }
            if(ls1!= NULL && rs1 != NULL)
            {
                parent = keyNode;

                while(ls1->rs != NULL)
                {
                parent = ls1;
                ls1 = ls1->rs;
                }
                keyNode->info= ls1->info;
                deleteNode(parent,key);
            }
        }
    }
    else
    {
        cout<<"\n Key not found in the tree";
    }
}
void BST::searchNode(Node *currentRoot, Node **keyNode, Node **parent, int key)
{
    if(currentRoot== NULL)
        return;
    else
    {
        while(currentRoot!= NULL)
        {
            if(currentRoot->info== key)
            {
                *keyNode= currentRoot;
                return;
            }
            else
            {
                *parent = currentRoot;
                if(currentRoot->info> key)
                currentRoot= currentRoot->ls;
                else
                currentRoot= currentRoot->rs;
            }
        }
    }
}
void BST::mirrorTree(Node *currentRoot)
{
    if(currentRoot!= NULL)
    {
        Node *temp;
        temp = currentRoot->ls;
        currentRoot->ls = currentRoot->rs;
        currentRoot->rs = temp;
        mirrorTree(currentRoot->ls);
        mirrorTree(currentRoot->rs);
    }
}
int BST::heightOfTree(Node *currentRoot)
{
    int lh=0, rh=0;
    if(currentRoot== NULL)
        return 0;
    else
    {
        lh = heightOfTree(currentRoot->ls);
        rh = heightOfTree(currentRoot->rs);
    }
    if(lh > rh)
        return(lh+1);
    else
        return(rh+1);
}
int BST::countLeafNodes(Node *currentRoot)
{
    int count=0;
    if(currentRoot== NULL)
        return 0;
    else if(currentRoot->ls== NULL &&currentRoot->rs== NULL)
        return 1;
    else
        count= countLeafNodes(currentRoot->ls)+countLeafNodes(currentRoot->rs);
        return count;
}
int BST::countNodes(Node *currentRoot)
{
    int count=0;
    if(currentRoot==NULL)
        return 0;
    else
        count = 1 + countNodes(currentRoot->ls) + countNodes(currentRoot->rs);
        return count;
}
void BST::nonInOrder(Node *currentRoot)
{
    stack <Node *> st;
    Node *temp;
    if(currentRoot == NULL)
        return ;
        temp= currentRoot;
    while(temp!= NULL || !st.empty() )
    {
        while(temp!= NULL)
        {
        st.push(temp);
        temp= temp->ls;
        }
        temp = st.top();
        st.pop();
        cout<<temp->info <<", ";
        temp= temp->rs;
    }
}
void BST::nonPreOrder(Node *currentRoot)
{
    stack <Node *> st;
    if(currentRoot == NULL)
        return ;
    Node *temp;
    temp = currentRoot;
    st.push(temp);
    while(!st.empty())
    {
        temp = st.top();
        st.pop();
        cout<<temp->info<<", ";
        if(temp->rs)
            st.push(temp->rs);
        if(temp->ls)
            st.push(temp->ls);
    }
}
void BST::nonPostOrder(Node *currentRoot)
{
    stack <Node *> st1,st2;
    Node *temp;
    if(currentRoot== NULL)
        return;
    temp = currentRoot;
    st1.push(temp);
    while(!st1.empty())
    {
        temp = st1.top();
        st1.pop();
        st2.push(temp);
        if(temp->ls)
        st1.push(temp->ls);
        if(temp->rs)
        st1.push(temp->rs);
    }
    while(!st2.empty())
    {
        temp= st2.top();
        st2.pop();
        cout<<temp->info<<", ";
    }
}
BST::BST()
{
    root=NULL;
}
Node *BST::getNode(int info)
{
    Node *new1;
    new1= new Node;
    if(new1== NULL)
    {
        cout<<"\n Memory allocation error";
        cout<<"\n Terminating the program";
        exit(-1);
    }
    new1->ls = NULL;
    new1->rs= NULL;
    new1->info =info;
    return new1;
}
void BST::insert(int info)
{
    Node *currentRoot, *parent;
    if(root== NULL)
    {
        root = getNode(info);
    }
    else
    {
        currentRoot = root;
        while(currentRoot != NULL)
        {
        parent = currentRoot;
        if(currentRoot->info > info)
            currentRoot= currentRoot->ls;
        else
            currentRoot = currentRoot->rs;
        }
        if(parent->info > info)
            parent->ls= getNode(info);
        else
            parent->rs = getNode(info);
    }
}
void BST::create(int n)
{
    int info;
    if(root != NULL)
    {
        cout<<"\n Tree already exists";
        return;
    }
    while(n>0)
    {
        cout<<"\n Enter information for new Node:";
        cin>>info;
        insert(info);
        n--;
    }
}
void BST::inOrder(Node *currentRoot)
{
    if(currentRoot!= NULL)
    {
        inOrder(currentRoot->ls);
        cout<<currentRoot->info<<", ";
        inOrder(currentRoot->rs);
    }
}
void BST::preOrder(Node *currentRoot)
{
    if(currentRoot!= NULL)
    {
        cout<<currentRoot->info<<", ";
        preOrder(currentRoot->ls);
        preOrder(currentRoot->rs);
    }
}
void BST::postOrder(Node *currentRoot)
{
    if(currentRoot!= NULL)
    {
        postOrder(currentRoot->ls);
        postOrder(currentRoot->rs);
        cout<<currentRoot->info<<", ";
    }
}
void BST::demo()
{
    int n, info;
    Node *keyNode,*parent;
    while(1)
    {
        switch(menu())
        {
        case 1:
            cout<<"\n Enter how many nodes:";
            cin>>n;
            create(n);
            break;
        case 2:
            cout<<"\n Enter information for insert:";
            cin>>info;
            insert(info);
            break;
        case 3:
            cout<<"\n Inoder out pput \n";
            inOrder(root);
            break;
        case 4:
            cout<<"\n PreOrder out pput \n";
            preOrder(root);
            break;
        case 5:
            cout<<"\n postOrder out pput \n";
            postOrder(root);
            break;
        case 6:
            cout<<"\n Non recursive Inoder out pput \n";
            nonInOrder(root);
            break;
        case 7:
            cout<<"\n Non recursive PreOrder out pput \n";
            nonPreOrder(root);
            break;
        case 8:
            cout<<"\n Non recursive postOrder out pput \n";
            nonPostOrder(root);
            break;
        case 9:
            cout<<"\n Number of nodes= "<< countNodes(root);
            break;
        case 10:
            cout<<"\n Number of leaf nodes= "<<countLeafNodes(root);
            break;
        case 11:
            cout<<"\n Height of tree="<<heightOfTree(root);
            break;
        case 12:
            mirrorTree(root);
            break;
        case 13:
            keyNode=parent= NULL;
            cout<<"\n Enter the key to be searched in tree:";
            cin>>info;
            searchNode(root,&keyNode,&parent, info);
            if(keyNode != NULL)
                cout<<"\n Key found in the tree";
            else
                cout<<"\n Key not found in tree";
            break;
        case 14:
            cout<<"\n Enter the key to be deleted in tree:";
            cin>>info;
            deleteNode(root,info);
            break;
        case 15:
            exit(0);
        }
    }
}
int BST::menu()
{
    int ch;
    cout<<"\n Enter"
    "\n1: for create tree"
    "\n2: for insert node"
    "\n3: for Inoder display"

    "\n4: for preOrder display"
    "\n5: for postoder display"
    "\n6: for Non Inoder display"
    "\n7: for Non preOrder display"
    "\n8: for Non postoder display"
    "\n9: for count nodes in tree"
    "\n10 for count leaf nodes"
    "\n11 for height of tree"
    "\n12 for mirror of tree"
    "\n13 for search a node in tree"
    "\n14 for delete a node from tree"
    "\n15: for terminate the program"
    "\nEnter your choice...";
    cin>>ch;
    return ch;
}
int main()
{
    BST bt;
    bt.demo();
    return 0;
}
